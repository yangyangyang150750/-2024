/* eslint-disable prettier/prettier */
import {
  CanActivate,
  ExecutionContext,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { jwtConstants } from './constants';
import { Request } from 'express';
import { IS_PUBLIC_KEY } from './decorators/public.decorator';
import { Reflector } from '@nestjs/core';

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(
    private jwtService: JwtService,
    private reflector:Reflector
  ) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    
    // Âà§Êñ≠ÂΩìÂâçÊòØÂê¶‰∏∫public
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    // Ëã•‰∏∫public 
    // ÂàôË°®ÊòéÊ≠§Êó∂Êó†ÈúÄÈ™åËØÅtoken 
    if (isPublic) {
      // üí° See this condition
      return true;
    }
    
    // requestËØ∑Ê±Ç
    const request = context.switchToHttp().getRequest();
    // ‰ªéËØ∑Ê±ÇÂ§¥‰∏≠ Ëé∑Âèñtoken
    const token = this.extractTokenFromHeader(request);

    // Âà§Êñ≠Êú¨Ê¨°ËØ∑Ê±ÇÊòØÂê¶Êúâtoken
    if (!token) {
      // Ëã•Ê≤°Êúâ
      // => ÊäõÂá∫ÈîôËØØ
      console.log('Êú¨Ê¨°ËØ∑Ê±ÇÊó†tokenÔºÅÔºÅÔºÅ');
      throw new UnauthorizedException();
    }

    // Ëã•Êú¨Ê¨°ËØ∑Ê±ÇÊê∫Â∏¶‰∫Ütoken
    try {
      // Ê†πÊçÆÊú¨Ê¨°ËØ∑Ê±ÇÊê∫Â∏¶ÁöÑtoken 
      // Ëß£ÊûêÂá∫Áî®Êà∑‰ø°ÊÅØ
      const payload = await this.jwtService.verifyAsync(token, {
        secret: jwtConstants.secret,
      });
      // üí° We're assigning the payload to the request object here
      // so that we can access it in our route handlers

      // Ê≠§Â§Ñpayload Âç≥‰∏∫userInfo
      request['user'] = payload;  
    } catch {
      throw new UnauthorizedException('TokenÊó†ÊïàÔºÅ');
    }
    return true;
  }

  private extractTokenFromHeader(request: Request): string | undefined {
    // Â∞ÜËØ∑Ê±ÇÂ§¥ÁöÑauthorizationÂ±ûÊÄßÂÄºËøõË°åÊãÜÂàÜ
    // => 'Bearer' 'xxx'
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    return type === 'Bearer' ? token : undefined;
  }
}
